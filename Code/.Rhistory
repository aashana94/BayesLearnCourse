CI1 = c(simG[floor(0.025*N)], simG[ceiling(.975*N)])
CI1alt = quantile(simG,probs=c(0.025,0.975), type=5)
cat("Equal tail probability credible interval: ",CI1)
dG = density(simG)
dn=sort(dG$y/sum(dG$y),index.return=TRUE);
# s=dn$x; idx=dn$ix
dnn = cumsum(dn$x)
HPDind = sort(dn$ix[dnn > .05])
notHPDind = sort(dn$ix[dnn <= .05])
plot(dG$x[notHPDind],dG$y[notHPDind],xlim=c(min(dG$x),max(dG$x)),
ylim=c(min(dG$y),max(dG$y)),title("Highest posterior density interval"),
xlab="Gini coefficient",ylab="Density")
points(dG$x[HPDind],dG$y[HPDind],col=2)
CI2 = c(min(dG$x[HPDind]),max(dG$x[HPDind]))
cat("\nHighest posterior density interval: ",CI2)
# Alternative HPD 1
library(coda)
CI2alt1 = HPDinterval(as.mcmc(simG), prob=0.95)
# Alternative HPD 2
density_approximation <- approxfun(density(simG))
densities <- density_approximation(simG)
densities_df <- data.frame("x" = simG, "density" = densities)
densities_df <- densities_df[order(densities_df$density, decreasing = TRUE),]
n_rows <- round(0.95 * nrow(densities_df))
densities_df <- densities_df[1:n_rows,]
x_min <- min(densities_df$x)
x_max <- max(densities_df$x)
CI2alt2 <- c(x_min, x_max)
simG <- 2*pnorm(sqrt(sim)/sqrt(2))-1
hist(simG,50,freq=FALSE,main="Gini coefficient posterior density",
xlab="Gini coefficient")
simG = sort(simG)
CI1 = c(simG[floor(0.025*N)], simG[ceiling(.975*N)])
CI1alt = quantile(simG,probs=c(0.025,0.975), type=5)
cat("Equal tail probability credible interval: ",CI1)
dG = density(simG)
dn=sort(dG$y/sum(dG$y),index.return=TRUE);
# s=dn$x; idx=dn$ix
dnn = cumsum(dn$x)
HPDind = sort(dn$ix[dnn > .05])
notHPDind = sort(dn$ix[dnn <= .05])
plot(dG$x[notHPDind],dG$y[notHPDind],xlim=c(min(dG$x),max(dG$x)),
ylim=c(min(dG$y),max(dG$y)),title("Highest posterior density interval"),
xlab="Gini coefficient",ylab="Density")
points(dG$x[HPDind],dG$y[HPDind],col=2)
CI2 = c(min(dG$x[HPDind]),max(dG$x[HPDind]))
cat("\nHighest posterior density interval: ",CI2)
# Alternative HPD 1
library(coda)
CI2alt1 = HPDinterval(as.mcmc(simG), prob=0.95)
# Alternative HPD 2
density_approximation <- approxfun(density(simG))
densities <- density_approximation(simG)
densities_df <- data.frame("x" = simG, "density" = densities)
densities_df <- densities_df[order(densities_df$density, decreasing = TRUE),]
n_rows <- round(0.95 * nrow(densities_df))
densities_df <- densities_df[1:n_rows,]
x_min <- min(densities_df$x)
x_max <- max(densities_df$x)
CI2alt2 <- c(x_min, x_max)
a = 1
b = 100
truePr <- pbeta(0.4,a,b)
N <- 10000
sim <- rbeta(N,a,b)
simPr <- mean(sim < 0.4)
cat("Exact posterior mean: ",truePr,"\nSample-based probability: ",simPr)
par(mfrow=c(1,2))
hist(log(sim/(1-sim)),freq=FALSE,main="Log-odds posterior density",xlab="log-odds")
plot(density(log(sim/(1-sim))),main="Log-odds posterior density",xlab="log-odds")
truePr <- pbeta(0.4,a,b)
N <- 10000
sim <- rbeta(N,a,b)
simPr <- mean(sim < 0.4)
cat("Exact posterior mean: ",truePr,"\nSample-based probability: ",simPr)
par(mfrow=c(1,2))
hist(log(sim/(1-sim)),freq=FALSE,main="Log-odds posterior density",xlab="log-odds")
plot(density(log(sim/(1-sim))),main="Log-odds posterior density",xlab="log-odds")
set.seed(123)
alpha <- 2
beta <- 2
s <- 14
n <- 20
f <- n - s
a <- alpha + s
b <- beta + f
N <- 1000
truePostMean <- a/(a+b)
truePostSD <- sqrt( a*b / ((a+b)^2*(a+b+1)))
sim <- rbeta(N,a,b)
cat("Exact posterior mean: ",truePostMean,
"\nSample-based posterior mean: ", mean(sim),
"\nExact posterior st.dev.: ",truePostSD,
"\nSample-based posterior st.dev.: ",sd(sim))
cumMean = (1/(2:N)) * cumsum(sim[2:N])
cumSD = sqrt((1/((2:N)-1)) * cumsum((sim[2:N]-cumMean)^2))
plot(2:N,cumMean,type="l",ylim=c(0,1),main="Convergence of posterior mean and SD",
xlab="Iterations")
lines(2:N,cumSD,type="l",col="red")
legend(0,1,c("Mean","SD"),c(1,2))
truePr <- pbeta(0.4,a,b)
N <- 10000
sim <- rbeta(N,a,b)
simPr <- mean(sim < 0.4)
cat("Exact posterior mean: ",truePr,"\nSample-based probability: ",simPr)
par(mfrow=c(1,2))
hist(log(sim/(1-sim)),freq=FALSE,main="Log-odds posterior density",xlab="log-odds")
plot(density(log(sim/(1-sim))),main="Log-odds posterior density",xlab="log-odds")
set.seed(123)
n <- 10
mu <- 3.5
x <- c(14, 25, 45, 25, 30, 33, 19, 50, 34, 67)
tau2 <- mean((log(x)-mu)^2)
N <- 10000
sim0 <- rchisq(N,n)
sim <- n*tau2/sim0
hist(sim,30,freq=FALSE,main="Posterior density",xlab=expression(sigma^2))
dinvchisq <- function(x) {
(tau2*n/2)^(n/2)/gamma(n/2)*exp(-n*tau2/(2*x))/x^(1+n/2)
}
xgrid <- (1:250)/100
dens <- vector(length=length(xgrid))
for(i in 1:250) dens[i]<-dinvchisq(xgrid[i])
lines(xgrid,dens,col="red")
legend(2,4,c("Simulated","Analytical"),c(1,2))
simG <- 2*pnorm(sqrt(sim)/sqrt(2))-1
hist(simG,50,freq=FALSE,main="Gini coefficient posterior density",
xlab="Gini coefficient")
set.seed(123)
n <- 10
mu <- 3.5
x <- c(14, 25, 45, 25, 30, 33, 19, 50, 34, 67)
tau2 <- mean((log(x)-mu)^2)
N <- 10000
sim0 <- rchisq(N,n)
sim <- n*tau2/sim0
hist(sim,30,freq=FALSE,main="Posterior density",xlab=expression(sigma^2))
dinvchisq <- function(x) {
(tau2*n/2)^(n/2)/gamma(n/2)*exp(-n*tau2/(2*x))/x^(1+n/2)
}
xgrid <- (1:250)/100
dens <- vector(length=length(xgrid))
for(i in 1:250) dens[i]<-dinvchisq(xgrid[i])
lines(xgrid,dens,col="red")
legend(2,4,c("Simulated","Analytical"),c(1,2))
simG <- 2*pnorm((sim)/sqrt(2))-1
hist(simG,50,freq=FALSE,main="Gini coefficient posterior density",
xlab="Gini coefficient")
simG = sort(simG)
CI1 = c(simG[floor(0.025*N)], simG[ceiling(.975*N)])
CI1alt = quantile(simG,probs=c(0.025,0.975), type=5)
cat("Equal tail probability credible interval: ",CI1)
dG = density(simG)
dn=sort(dG$y/sum(dG$y),index.return=TRUE);
# s=dn$x; idx=dn$ix
dnn = cumsum(dn$x)
HPDind = sort(dn$ix[dnn > .05])
notHPDind = sort(dn$ix[dnn <= .05])
plot(dG$x[notHPDind],dG$y[notHPDind],xlim=c(min(dG$x),max(dG$x)),
ylim=c(min(dG$y),max(dG$y)),title("Highest posterior density interval"),
xlab="Gini coefficient",ylab="Density")
points(dG$x[HPDind],dG$y[HPDind],col=2)
CI2 = c(min(dG$x[HPDind]),max(dG$x[HPDind]))
cat("\nHighest posterior density interval: ",CI2)
# Alternative HPD 1
library(coda)
CI2alt1 = HPDinterval(as.mcmc(simG), prob=0.95)
# Alternative HPD 2
density_approximation <- approxfun(density(simG))
densities <- density_approximation(simG)
densities_df <- data.frame("x" = simG, "density" = densities)
densities_df <- densities_df[order(densities_df$density, decreasing = TRUE),]
n_rows <- round(0.95 * nrow(densities_df))
densities_df <- densities_df[1:n_rows,]
x_min <- min(densities_df$x)
x_max <- max(densities_df$x)
CI2alt2 <- c(x_min, x_max)
?p.interval
??p.interval
install.packages("fields")
data <- read.table("TempLinkoping.txt",header=TRUE)
data2 <- cbind(data,time2=data$time^2)
sigma0 <- 5
nu0 <- 10
mu0 <- c(-10,100,-100)
omega0 <- diag(c(5,2.5,5))
plot(mu0[1] + data2$time*mu0[2] + data2$time2*mu0[3],col=2,type="l",
xlab="day",ylab="Temperature",main="Mean prior regression curve")
data <- read.table("TempLinkoping.txt",header=TRUE)
data2 <- cbind(data,time2=data$time^2)
sigma0 <- 5
nu0 <- 10
mu0 <- c(-5,100,-100)
omega0 <- diag(c(5,2.5,5))
plot(mu0[1] + data2$time*mu0[2] + data2$time2*mu0[3],col=2,type="l",
xlab="day",ylab="Temperature",main="Mean prior regression curve")
library(mvtnorm)
set.seed(123)
data <- read.table("TempLinkoping.txt",header=TRUE)
data2 <- cbind(data,time2=data$time^2)
sigma0 <- 5
nu0 <- 10
mu0 <- c(-5,100,-100)
omega0 <- diag(c(5,2.5,5))
# plot(mu0[1] + data2$time*mu0[2] + data2$time2*mu0[3],col=2,type="l",
#      xlab="day",ylab="Temperature",main="Mean prior regression curve")
N <- 100
rc <- rchisq(N,nu0)
sigmasim <- nu0*sigma0^2/rc
betasim <- matrix(0,N,3)
for(i in 1:N) {
betasim[i,] <- rmvnorm(1,mu0,sigmasim[i]*solve(omega0))
}
plot(betasim[1,1] + data2$time*betasim[1,2] + data2$time2*betasim[1,3],type="l",
ylim=c(-10,40),xlab="day",ylab="Temperature",main="100 simulations of the regression \n curve from the prior")
for(i in 2:N) {
lines(betasim[i,1] + data2$time*betasim[i,2] + data2$time2*betasim[i,3])
}
library(mvtnorm)
set.seed(123)
data <- read.table("TempLinkoping.txt",header=TRUE)
data2 <- cbind(data,time2=data$time^2)
sigma0 <- 5
nu0 <- 10
mu0 <- c(-5,100,-100)
omega0 <- diag(c(5,2.5,5))
# plot(mu0[1] + data2$time*mu0[2] + data2$time2*mu0[3],col=2,type="l",
#      xlab="day",ylab="Temperature",main="Mean prior regression curve")
N <- 100
rc <- rchisq(N,nu0)
sigmasim <- nu0*sigma0^2/rc
betasim <- matrix(0,N,3)
for(i in 1:N) {
betasim[i,] <- rmvnorm(1,mu0,sigmasim[i]*solve(omega0))
}
plot(betasim[1,1] + data2$time*betasim[1,2] + data2$time2*betasim[1,3],type="l",
ylim=c(-10,40),xlab="day",ylab="Temperature",main="100 simulations of the regression \n curve from the prior")
for(i in 2:N) {
lines(betasim[i,1] + data2$time*betasim[i,2] + data2$time2*betasim[i,3])
}
library(mvtnorm)
set.seed(123)
N <- 1000
n <- nrow(data2)
nun <- nu0 + n
X <- cbind(rep(1,n), data2$time, data2$time2)
y <- data2$temp
omegan <- t(X)%*%X + omega0
betahat <- solve(t(X)%*%X)%*%t(X)%*%y
mun <- solve(omegan)%*%(t(X)%*%X%*%betahat + omega0%*%mu0)
sigman <- c(sqrt((nu0*sigma0^2 + (t(y)%*%y) + t(mu0)%*%omega0%*%mu0 - t(mun)%*%omegan%*%mun)/nun))
rc <- rchisq(N,nun)
sigmasim <- nun*sigman^2/rc
betasim <- matrix(0,N,3)
for(i in 1:N) {
betasim[i,] <- rmvnorm(1,mun,sigmasim[i]*solve(omegan))
}
fmean = matrix(0,n,1)
fbands = matrix(0,n,2)
for(t in 1:n){
f = X[t,]%*%t(betasim)
fmean[t] = mean(f)
fbands[t,] = quantile(f,probs=c(.05,.95))
}
plot(data2$time,data2$temp,type='p',xlab="day",ylab="Temperature",main="Posterior mean and bands")
lines(data2$time,fmean)
lines(data2$time,fbands[,1],col=2)
lines(data2$time,fbands[,2],col=2)
hist(betasim[1,])
hist(betasim[,1])
hist(betasim[,1],freq=F,n=30)
hist(betasim[,1],freq=F,n=30,main="beta0")
hist(betasim[,1],freq=F,n=30,main="beta0",main="\expression(beta_0)")
par(mfrow=c(2,2))
hist(betasim[,1],freq=F,n=30,ylab="beta0",main="Posteior for beta0")
hist(betasim[,2],freq=F,n=30,ylab="beta1",main="Posteior for beta1")
hist(betasim[,3],freq=F,n=30,ylabn="beta2",main="Posteior for beta2")
hist(sigmasim,freq=F,n=30,ylabn="sigma2",main="Posteior for sigma2")
par(mfrow=c(2,2))
hist(betasim[,1],freq=F,n=30,ylab="beta0",main="Posteior for beta0")
hist(betasim[,2],freq=F,n=30,ylab="beta1",main="Posteior for beta1")
hist(betasim[,3],freq=F,n=30,ylabn="beta2",main="Posteior for beta2")
hist(sigmasim,freq=F,n=30,ylabn="sigma2",main="Posteior for sigma2")
plot(data2$time,data2$temp,type='p',xlab="day",ylab="Temperature",main="Posterior mean and bands")
library(mvtnorm)
set.seed(123)
N <- 1000
n <- nrow(data2)
nun <- nu0 + n
X <- cbind(rep(1,n), data2$time, data2$time2)
y <- data2$temp
omegan <- t(X)%*%X + omega0
betahat <- solve(t(X)%*%X)%*%t(X)%*%y
mun <- solve(omegan)%*%(t(X)%*%X%*%betahat + omega0%*%mu0)
sigman <- c(sqrt((nu0*sigma0^2 + (t(y)%*%y) + t(mu0)%*%omega0%*%mu0 - t(mun)%*%omegan%*%mun)/nun))
rc <- rchisq(N,nun)
sigmasim <- nun*sigman^2/rc
betasim <- matrix(0,N,3)
for(i in 1:N) {
betasim[i,] <- rmvnorm(1,mun,sigmasim[i]*solve(omegan))
}
fmean = matrix(0,n,1)
fbands = matrix(0,n,2)
for(t in 1:n){
f = X[t,]%*%t(betasim)
fmean[t] = mean(f)
fbands[t,] = quantile(f,probs=c(.05,.95))
}
par(mfrow=c(2,2))
hist(betasim[,1],freq=F,n=30,ylab="beta0",main="Posteior for beta0")
hist(betasim[,2],freq=F,n=30,ylab="beta1",main="Posteior for beta1")
hist(betasim[,3],freq=F,n=30,ylabn="beta2",main="Posteior for beta2")
hist(sigmasim,freq=F,n=30,ylabn="sigma2",main="Posteior for sigma2")
plot(data2$time,data2$temp,type='p',xlab="day",ylab="Temperature",main="Posterior mean and bands")
lines(data2$time,fmean)
lines(data2$time,fbands[,1],col=2)
lines(data2$time,fbands[,2],col=2)
library(mvtnorm)
set.seed(123)
N <- 1000
n <- nrow(data2)
nun <- nu0 + n
X <- cbind(rep(1,n), data2$time, data2$time2)
y <- data2$temp
omegan <- t(X)%*%X + omega0
betahat <- solve(t(X)%*%X)%*%t(X)%*%y
mun <- solve(omegan)%*%(t(X)%*%X%*%betahat + omega0%*%mu0)
sigman <- c(sqrt((nu0*sigma0^2 + (t(y)%*%y) + t(mu0)%*%omega0%*%mu0 - t(mun)%*%omegan%*%mun)/nun))
rc <- rchisq(N,nun)
sigmasim <- nun*sigman^2/rc
betasim <- matrix(0,N,3)
for(i in 1:N) {
betasim[i,] <- rmvnorm(1,mun,sigmasim[i]*solve(omegan))
}
fmean = matrix(0,n,1)
fbands = matrix(0,n,2)
for(t in 1:n){
f = X[t,]%*%t(betasim)
fmean[t] = mean(f)
fbands[t,] = quantile(f,probs=c(.05,.95))
}
par(mfrow=c(2,2))
hist(betasim[,1],freq=F,n=30,ylab="beta0",main="Posteior for beta0")
hist(betasim[,2],freq=F,n=30,ylab="beta1",main="Posteior for beta1")
hist(betasim[,3],freq=F,n=30,ylabn="beta2",main="Posteior for beta2")
hist(sigmasim,freq=F,n=30,ylabn="sigma2",main="Posteior for sigma2")
par(mfrow=c(1,1))
plot(data2$time,data2$temp,type='p',xlab="day",ylab="Temperature",main="Posterior mean and bands")
lines(data2$time,fmean)
lines(data2$time,fbands[,1],col=2)
lines(data2$time,fbands[,2],col=2)
library(mvtnorm)
set.seed(123)
N <- 1000
n <- nrow(data2)
nun <- nu0 + n
X <- cbind(rep(1,n), data2$time, data2$time2)
y <- data2$temp
omegan <- t(X)%*%X + omega0
betahat <- solve(t(X)%*%X)%*%t(X)%*%y
mun <- solve(omegan)%*%(t(X)%*%X%*%betahat + omega0%*%mu0)
sigman <- c(sqrt((nu0*sigma0^2 + (t(y)%*%y) + t(mu0)%*%omega0%*%mu0 - t(mun)%*%omegan%*%mun)/nun))
rc <- rchisq(N,nun)
sigmasim <- nun*sigman^2/rc
betasim <- matrix(0,N,3)
for(i in 1:N) {
betasim[i,] <- rmvnorm(1,mun,sigmasim[i]*solve(omegan))
}
fmean = matrix(0,n,1)
fbands = matrix(0,n,2)
for(t in 1:n){
f = X[t,]%*%t(betasim)
fmean[t] = mean(f)
fbands[t,] = quantile(f,probs=c(.025,.975))
}
par(mfrow=c(2,2))
hist(betasim[,1],freq=F,n=30,ylab="beta0",main="Posteior for beta0")
hist(betasim[,2],freq=F,n=30,ylab="beta1",main="Posteior for beta1")
hist(betasim[,3],freq=F,n=30,ylabn="beta2",main="Posteior for beta2")
hist(sigmasim,freq=F,n=30,ylabn="sigma2",main="Posteior for sigma2")
par(mfrow=c(1,1))
plot(data2$time,data2$temp,type='p',xlab="day",ylab="Temperature",main="Posterior mean and bands")
lines(data2$time,fmean)
lines(data2$time,fbands[,1],col=2)
lines(data2$time,fbands[,2],col=2)
xtildesim = -betasim[,2]/(2*betasim[,3])
hist(xtildesim,20,main="Posterior distribution of x tilde",xlab="x tilde")
library(mvtnorm)
set.seed(123)
N <- 1000
n <- nrow(data2)
nun <- nu0 + n
X <- cbind(rep(1,n), data2$time, data2$time2)
y <- data2$temp
omegan <- t(X)%*%X + omega0
betahat <- solve(t(X)%*%X)%*%t(X)%*%y
mun <- solve(omegan)%*%(t(X)%*%X%*%betahat + omega0%*%mu0)
sigman <- c(sqrt((nu0*sigma0^2 + (t(y)%*%y) + t(mu0)%*%omega0%*%mu0 - t(mun)%*%omegan%*%mun)/nun))
rc <- rchisq(N,nun)
sigmasim <- nun*sigman^2/rc
betasim <- matrix(0,N,3)
for(i in 1:N) {
betasim[i,] <- rmvnorm(1,mun,sigmasim[i]*solve(omegan))
}
fmean = matrix(0,n,1)
fbands = matrix(0,n,2)
for(t in 1:n){
f = X[t,]%*%t(betasim)
fmean[t] = mean(f)
fbands[t,] = quantile(f,probs=c(.025,.975))
}
par(mfrow=c(2,2))
hist(betasim[,1],freq=F,n=30,xlab="beta0",main="Posterior for beta0")
hist(betasim[,2],freq=F,n=30,xlab="beta1",main="Posterior for beta1")
hist(betasim[,3],freq=F,n=30,xlab="beta2",main="Posterior for beta2")
hist(sigmasim,freq=F,n=30,xlab="sigma2",main="Posterior for sigma2")
par(mfrow=c(1,1))
plot(data2$time,data2$temp,type='p',xlab="day",ylab="Temperature",main="Posterior mean and bands")
lines(data2$time,fmean)
lines(data2$time,fbands[,1],col=2)
lines(data2$time,fbands[,2],col=2)
WomenWork <- read.table("WomenWork.dat",header=TRUE)
glmModel <- glm(Work ~ 0 + ., data = WomenWork, family = binomial)
summary(glmModel)
library(mvtnorm)
y <- as.vector(WomenWork[,1])
X <- as.matrix(WomenWork[,2:9])
covNames <- names(WomenWork)[2:length(names(WomenWork))]
nPara <- dim(X)[2]
# Setting up the prior
tau <- 10
mu <- as.vector(rep(0,nPara)) # Prior mean vector
Sigma <- tau^2*diag(nPara)
# Defining the functions that returns the log posterior (Logistic and Probit models). Note that the first input argument of
# this function must be the one that we optimize on, i.e. the regression coefficients.
LogPostLogistic <- function(betaVect,y,X,mu,Sigma){
nPara <- length(betaVect)
linPred <- X%*%betaVect
# evaluating the log-likelihood
logLik <- sum( linPred*y -log(1 + exp(linPred)))
if (abs(logLik) == Inf) logLik = -20000; # Likelihood is not finite, stear the optimizer away from here!
# evaluating the prior
logPrior <- dmvnorm(betaVect, matrix(0,nPara,1), Sigma, log=TRUE)
# add the log prior and log-likelihood together to get log posterior
return(logLik + logPrior)
}
# Calling the optimization routine Optim. Note the auxilliary arguments that are passed to the function logPost
# Note how I pass all other arguments of the function logPost (i.e. all arguments except betaVect which is the one that we are trying to optimize over) to the R optimizer.
# The argument control is a list of options to the optimizer. Here I am telling the optimizer to multiply the objective function (i.e. logPost) by -1. This is because
# Optim finds a minimum, and I want to find a maximum. By reversing the sign of logPost I can use Optim for my maximization problem.
# Different starting values. Ideally, any random starting value gives you the same optimum (i.e. optimum is unique)
# initVal <- as.vector(rep(0,dim(X)[2]));
# Or a random starting vector: as.vector(rnorm(dim(X)[2]))
# Set as OLS estimate: as.vector(solve(crossprod(X,X))%*%t(X)%*%y); # Initial values by OLS
initVal = glmModel$coefficients
logPost = LogPostLogistic;
OptimResults<-optim(initVal,logPost,gr=NULL,y,X,mu,Sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
# Printing the results to the screen
postMode <- OptimResults$par
postCov <- -solve(OptimResults$hessian) # Posterior covariance matrix is -inv(Hessian)
names(postMode) <- covNames # Naming the coefficient by covariates
# approxPostStd <- sqrt(diag(postCov)) # Computing approximate standard deviations.
# names(approxPostStd) <- covNames # Naming the coefficient by covariates
print('The posterior mode is:')
print(postMode)
print('The posterior covariance matrix is:')
print(postCov)
print('A 95% credible interval for  NSmallChild is')
print(postMode[7] + 1.96*sqrt(postCov[7,7])*c(-1,1))
simuPredPost <- function(Ns,postMode,postCov,X){
X = t(as.matrix(X))
n <- dim(X)[1]
nPara <- length(postMode)
betaSim = matrix(0,Ns,nPara)
for(i in 1:Ns) {
betaSim[i,] <- rmvnorm(1,postMode,postCov)
}
linPred <- X%*%t(betaSim)
ySim <- matrix(runif(n*Ns),n,Ns) < (exp(linPred) / (1+exp(linPred)))
return(as.numeric(ySim))
}
X = c(1,10,8,10,1,40,1,1)
ySim = simuPredPost(1000,postMode,postCov,X)
hist(ySim,xlab="y",main="Predictive distribution")
mean(ySim)
?rnorm
?apply
source('~/Dropbox/phd/Undervisning/BLprivate/BayesLearnCourse/Code/NormalMixtureGibbs.R')
source('~/Dropbox/phd/Undervisning/BLprivate/BayesLearnCourse/Code/SimulateDiscreteMarkovChain.R')
install.packages(expm)
install.packages("expm")
source('~/Dropbox/phd/Undervisning/BLprivate/BayesLearnCourse/Code/SimulateDiscreteMarkovChain.R')
##########    BEGIN USER INPUT #################
# Data options
data(faithful)
rawData <- faithful
x <- as.matrix(rawData['eruptions'])
hist(x)
hist(x,30)
?faithful
hist(x,30)
source('~/Dropbox/phd/Undervisning/BLprivate/BayesLearnCourse/Code/NormalMixtureGibbs.R')
source('~/Dropbox/phd/Undervisning/BLprivate/BayesLearnCourse/Code/NormalMixtureGibbs.R')
x = rnorm(1000)
plot(x)
plot(x,t="l")
plot(y,t="l")
source('~/Dropbox/phd/Undervisning/BLprivate/BayesLearnCourse/Code/EffectiveSampleSize.R', encoding = 'UTF-8')
setwd("~/Dropbox/phd/Undervisning/BLprivate/BayesLearnCourse/Code")
source('~/Dropbox/phd/Undervisning/BLprivate/BayesLearnCourse/Code/EffectiveSampleSize.R', encoding = 'UTF-8')
source('~/Dropbox/phd/Undervisning/BLprivate/BayesLearnCourse/Code/EffectiveSampleSize.R')
plot(y,t="l")
